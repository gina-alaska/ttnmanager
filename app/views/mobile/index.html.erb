<script type="text/javascript">
  ATN.controller = new Ext.ux.EventManager({
    events: ['login', 'back_zone', 'save_zone', 'after_zone_save','back_message', 'save_message','after_message_save', 'message_update'],
    listeners: {
      scope: ATN,
      'login': function() {
        Ext.Msg.alert('Notice', 'Not Implemented Yet');
      },
      'save_zone': function() {
        Ext.ux.Ajax.formSubmit({
          "url": '/zones',
          "form": this.zone_form,
          "root": 'zone',
          listeners: {
            scope: this,
            success: function(response, options) {
              this.controller.fireEvent('after_zone_save');
            }
          }
        });
      },
      'save_message': function() {
        Ext.ux.Ajax.formSubmit({
          "url": '/alerts',
          "form": this.message_form,
          "root": 'alert',
          listeners: {
            scope: this,
            success: function(response, options) {
              this.controller.fireEvent('after_message_save');
            }
          }
        });
      }
    }
  });

  ATN.message_form = new Ext.form.FormPanel({
    title: 'Message Form',
    url: '/alerts',
    scroll: 'vertical',
    monitorOrientation: true,
    items: [{
      xtype: 'hidden',
      name: 'id'
    },{
      title: 'Message Form',
      xtype: 'fieldset',
      items: [{
        xtype: 'select',
        name: 'zone_id',
        label: 'Zone',
        store: ATN.ZoneStore,
        displayField: 'name',
        valueField: 'id'
      }, {
        xtype: 'toggle',
        name: 'active',
        label: 'Active',
        value: 1
      },{
        xtype: 'textarea',
        name: 'text',
        label: 'Message'
      }]
    },{
      xtype: 'button',
      text: 'Cancel',
      cls: 'buttons',
      handler: function() {
        ATN.controller.fireEvent('back_message');
      }
    }, {
      xtype: 'button',
      text: 'Save',
      ui: 'action',
      cls: 'buttons',
      handler: function() {
        ATN.controller.fireEvent('save_message');
      }
    }]
  });

  ATN.view_message = new Ext.Panel({
    title: 'Message',
    bodyStyle: 'padding: 3px;',
    tpl: new Ext.XTemplate(
      '<tpl for=".">' +
        '<div class="alert">' +
          '<p>Zone: {zone.name}</p><br />' +
          '<p>{text}</p>' +
        '</div>' +
      '</tpl>', {
      compile: true
    }),

    dockedItems: [{
      dock: 'top',
      title: 'Message Info',
      xtype: 'toolbar',
      defaults: { ui: 'plain', iconMask: true },
      items: [{
        iconCls: 'arrow_left',
        handler: function() {
          ATN.controller.fireEvent('back_message');
        }
      }, { xtype: 'spacer' }, {
        iconCls: 'compose',
        handler: function() {
          ATN.controller.fireEvent('edit_message');
        }
      }]
    }],
    load: function(record) {
      this.ctxRecord = record;
      var data = record.data;
      this.update(this.tpl.apply(data));
    }
  });

  ATN.zone_status = new Ext.Panel({
    title: 'Status',
    tpl: new Ext.Template(
      '<div class="zone_status">',
        '<h2>Zone: {name}</h2>',
        '<div><label>Status: </label><span class="status-{status}">{status}</span></div>',
        '<div><label>Message: </label><span class="message">{message}</span></div>',
      '</div>',
      { compiled: true }
    ),
    load: function(data) {
      this.update(this.tpl.apply({
        name: data.get('name'),
        status: data.get('status'),
        message: 'Testing'
      }));
    }
  });

  ATN.login = new Ext.form.FormPanel({
    itemId: 'login',
    title: 'Login',
    url: '/login',
    iconCls: 'user',
    flex: 1,
    items: [{
      xtype: 'fieldset',
      title: 'Enter your Login PIN below',
      items: [{
        xtype: 'passwordfield',
        name: 'pin',
        label: 'PIN'
      }]
    },{
      xtype: 'button',
      text: 'Submit',
      ui: 'action',
      handler: function() {
        ATN.controller.fireEvent('login');
      }
    }]
  });

  ATN.zone_form = new Ext.form.FormPanel({
    id: 'zone_editor',
    title: 'Zone Editor',
    url: '/zones',
    scroll: 'vertical',
    monitorOrientation: true,
    load: function(data) {
      this.getComponent('status').setTitle(data.get('name'));
      this.getComponent('zone-toolbar').setTitle(data.get('name'));
      this.reset();
      this.loadModel(data);
      Ext.each(data.get('messages'), function(message) {
        var item = this.getComponent(message.group).getComponent('message_' + message.id);
        if (item) { item.setValue(true); }
      }, this)
    },
    dockedItems: [{
      itemId: 'zone-toolbar',
      dock: 'top',
      title: 'Zone Info',
      xtype: 'toolbar',
      defaults: { ui: 'plain', iconMask: true },
      items: [{
        iconCls: 'arrow_left',
        handler: function() {
          ATN.controller.fireEvent('back_zone');
        }
      }, { xtype: 'spacer' }, {
        ui: 'action',
        text: 'Save',
        handler: function() {
          ATN.controller.fireEvent('save_zone');
        }
      }]
    }],
    items: [{
      xtype: 'hidden',
      name: 'id'
    },{
      itemId: 'status',
      title: 'Zone name here',
      xtype: 'fieldset',
      items: [{
        xtype: 'select',
        name: 'travel_status',
        label: 'Travel Status',
        options: [
          { text: 'Open', value: 'Open' },
//        { text: 'Limited', value: 'Limited' },
          { text: 'Closed', value: 'Closed' }
        ]
      }, {
        xtype: 'textarea',
        name: 'notes',
        label: 'Notes'
      }]
    },{
      itemId: 'soil',
      title: 'Soil Status',
      xtype: 'fieldset',
      items: [
        <%= Message.soil.collect { |m| message_checkbox(m).to_s }.join(',') %>
      ]
    },{
      itemId: 'snow',
      title: 'Snow Status',
      xtype: 'fieldset',
      items: [
        <%= Message.snow.collect { |m| message_checkbox(m).to_s }.join(',') %>
      ]
    },{
      itemId: 'operational',
      title: 'Operational Considerations',
      xtype: 'fieldset',
      items: [
        <%= Message.operational.collect { |m| message_checkbox(m).to_s }.join(',') %>
      ]
    },{
      itemId: 'alert',
      title: 'Alerts',
      xtype: 'fieldset',
      items: [
        <%= Message.alert.collect { |m| message_checkbox(m).to_s }.join(',') %>
      ]
    }]
  });
</script>